#include<iostream>
#include<fstream>
#include<string>
#include<iomanip>
using namespace std;

void itemChoice();
int idGenerator(string txtfile);

class item
{
    protected:
        int itemId, noUnits, cartOption;
        string itemName, itemCompany, itemType;
        double price;
        string itemFile = "itemId.txt";

    public:
		void setCartOption(int choice)
		{
			cartOption = choice;
			
		}
};

class magazine : public item
{
    private:
		int year, month;
    	string itemCartId;
    	string maFile = "magazine.txt";
		string maCartFile = "magazineCart.txt";
    
    public:
    	void viewItem()
    	{
			string line;
    		cout << "\n=========================================" << endl;
            cout << "              View Magazine              " << endl;
            cout << "=========================================" << endl;
			ifstream viewMaFile(maCartFile);
			if(viewMaFile.fail())
			{	
				cout << "Fail to open file...";
			}
			else
			{
				while(getline(viewMaFile, line))
				{
					cout << line << endl;
				}
			}
			viewMaFile.close();
		}
        void addItem()
        {
			string line, savedLine;
			size_t pos;
			cout << "\n=========================================" << endl;
            cout << "               Add Magazine              " << endl;
            cout << "=========================================" << endl;
			cout << "Enter item id: ";
			cin.ignore();
			getline(cin, itemCartId);

			ifstream readMaFile;
			readMaFile.open(maFile, ios::in);

			if(readMaFile)
			{
				while(getline(readMaFile, line))
				{
					pos = line.find(itemCartId);
					if(pos != string::npos)
					{
						if(pos<10)
						{
							savedLine = line;
						}
						else
						{
							readMaFile.close();

							cout << itemCartId << " does not exist. Please re-enter an valid id: ";
							getline(cin, itemCartId);
							addItem();

						}
					}
				}
			}
			else
			{
				cout << "Fail to open file...";
			}
			
			readMaFile.close();	

			ofstream addMaFile;
			addMaFile.open(maCartFile, ios::app);

			if(addMaFile.is_open())
			{
				addMaFile << savedLine << endl;
			}
			else
			{
				cout << "Fail to open file...";
			}
			addMaFile.close();
			
		}
        void deleteItem()
		{
			string line, savedLine;
			size_t pos;
			const char * cnvrFileName = maCartFile.c_str();
			cout << "\n=========================================" << endl;
            cout << "             Delete Magazine             " << endl;
            cout << "=========================================" << endl;
			cout << "Enter item id: ";
			cin.ignore();
			getline(cin, itemCartId);

			ifstream readMaCartFile;
			readMaCartFile.open(maCartFile, ios::in);

			if(readMaCartFile.is_open())
			{
				while(getline(readMaCartFile, line))
				{
					pos = line.find(itemCartId);
					if(pos != string::npos)
					{
						if(pos < 10)
						{
							savedLine = line;
						}
						else
						{
							readMaCartFile.close();

							cout << itemCartId << " does not exist. Please re-enter an valid id: ";
							getline(cin, itemCartId);
							addItem();
						}
					}
				}
			}
			else
			{
				cout << "Fail to open file...";
			}
			readMaCartFile.close();

			if(savedLine == "")
			{
				cout << "Item not found" << endl;
			}
			else
			{
				line = "";

				ifstream getFile;
				getFile.open(maCartFile, ios::in);

				ofstream temporarily;
				temporarily.open("temporarily.txt");

				while(getline(getFile, line))
				{
					if(line.compare(savedLine) != 0)
					{
						temporarily << line << endl;
					}
				}
				getFile.close();
				temporarily.close();
			}

			if(remove(cnvrFileName)==0)
			{
				cout << "Removed selected item from shopping cart. " << endl;

				if(rename("temporarily.txt", cnvrFileName)==0)
				{
					cout << "Renamed temporarily file to original file" << endl;
				}
				else
				{
                    cout << "Renamed Failed";
                }
            }
			else
			{
                cout << "Removed Failed";
			}
		}
        void modifyItem()
		{
			cout << "12188" << endl;
		}
};

class book : public item
{
    private:
	string itemCartId;
    string authorName;
	string boFile = "book.txt";
    string boCartFile = "bookCart.txt";

    public:
    	void viewItem()
    	{
    		string line;
    		cout << "\n=========================================" << endl;
            cout << "               View Book                " << endl;
            cout << "=========================================" << endl;
			ifstream viewBoFile(boCartFile);
			if(viewBoFile.fail())
			{	
				cout << "Fail to open file...";
			}
			else
			{
				while(getline(viewBoFile, line))
				{
					cout << line << endl;
				}
			}
			viewBoFile.close();
		}
        void addItem()
        {
        	string line, savedLine;
			size_t pos;
			cout << "\n=========================================" << endl;
            cout << "               Add Magazine              " << endl;
            cout << "=========================================" << endl;
			cout << "Enter item id: ";
			cin.ignore();
			getline(cin, itemCartId);

			ifstream readBoFile;
			readBoFile.open(boFile, ios::in);

			if(readBoFile)
			{
				while(getline(readBoFile, line))
				{
					pos = line.find(itemCartId);
					if(pos != string::npos)
					{
						if(pos<10)
						{
							savedLine = line;
						}
						else
						{
							readBoFile.close();

							cout << itemCartId << " does not exist. Please re-enter an valid id: ";
							getline(cin, itemCartId);
							addItem();

						}
					}
				}
			}
			else
			{
				cout << "Fail to open file...";
			}

			readBoFile.close();	

			ofstream addBoFile;
			addBoFile.open(boCartFile, ios::app);

			if(addBoFile.is_open())
			{
				addBoFile << savedLine << endl;
			}
			else
			{
				cout << "Fail to open file...";
			}
			addBoFile.close();

		}
        void deleteItem()
        {
        	string line, savedLine;
			size_t pos;
			const char * cnvrFileName = boCartFile.c_str();
			cout << "\n=========================================" << endl;
            cout << "                Delete Book              " << endl;
            cout << "=========================================" << endl;
			cout << "Enter item id: ";
			cin.ignore();
			getline(cin, itemCartId);

			ifstream readBoCartFile;
			readBoCartFile.open(boCartFile, ios::in);

			if(readBoCartFile.is_open())
			{
				while(getline(readBoCartFile, line))
				{
					pos = line.find(itemCartId);
					if(pos != string::npos)
					{
						if(pos < 10)
						{
							savedLine = line;
						}
						else
						{
							readBoCartFile.close();

							cout << itemCartId << " does not exist. Please re-enter an valid id: ";
							getline(cin, itemCartId);
							addItem();
						}
					}
				}
			}
			else
			{
				cout << "Fail to open file...";
			}
			readBoCartFile.close();

			if(savedLine == "")
			{
				cout << "Item not found" << endl;
			}
			else
			{
				line = "";

				ifstream getFile;
				getFile.open(boCartFile, ios::in);

				ofstream temporarily;
				temporarily.open("temporarily.txt");

				while(getline(getFile, line))
				{
					if(line.compare(savedLine) != 0)
					{
						temporarily << line << endl;
					}
				}
				getFile.close();
				temporarily.close();
			}

			if(remove(cnvrFileName)==0)
			{
				cout << "Removed selected item from shopping cart. " << endl;

				if(rename("temporarily.txt", cnvrFileName)==0)
				{
					cout << "Renamed temporarily file to original file" << endl;
				}
				else
				{
                    cout << "Renamed Failed";
                }
            }
			else
			{
                cout << "Removed Failed";
			}
		}
        void modifyItem()
        {
        	cout << "1317" << endl;
		}

};

class movie : public item {

    private:
    string itemCartId;
	string mainActorName;
	string moFile = "movie.txt";
    string moCartFile = "movieCart.txt";

    public:
    	void viewItem()
    	{
    		string line;
    		cout << "\n=========================================" << endl;
            cout << "               View Movie                " << endl;
            cout << "=========================================" << endl;
			ifstream viewMoFile(moCartFile);
			if(viewMoFile.fail())
			{	
				cout << "Fail to open file...";
			}
			else
			{
				while(getline(viewMoFile, line))
				{
					cout << line << endl;
				}
			}
			viewMoFile.close();
		}
        void addItem()
        {
        	string line, savedLine;
			size_t pos;
			cout << "\n=========================================" << endl;
            cout << "               Add Magazine              " << endl;
            cout << "=========================================" << endl;
			cout << "Enter item id: ";
			cin.ignore();
			getline(cin, itemCartId);

			ifstream readMoFile;
			readMoFile.open(moFile, ios::in);

			if(readMoFile)
			{
				while(getline(readMoFile, line))
				{
					pos = line.find(itemCartId);
					if(pos != string::npos)
					{
						if(pos<10)
						{
							savedLine = line;
						}
						else
						{
							readMoFile.close();

							cout << itemCartId << " does not exist. Please re-enter an valid id: ";
							getline(cin, itemCartId);
							addItem();

						}
					}
				}
			}
			else
			{
				cout << "Fail to open file...";
			}

			readMoFile.close();	

			ofstream addMoFile;
			addMoFile.open(moCartFile, ios::app);

			if(addMoFile.is_open())
			{
				addMoFile << savedLine << endl;
			}
			else
			{
				cout << "Fail to open file...";
			}
			addMoFile.close();
		}
        void deleteItem()
        {
        	string line, savedLine;
			size_t pos;
			const char * cnvrFileName = moCartFile.c_str();
			cout << "\n=========================================" << endl;
            cout << "                Delete Book              " << endl;
            cout << "=========================================" << endl;
			cout << "Enter item id: ";
			cin.ignore();
			getline(cin, itemCartId);

			ifstream readMoCartFile;
			readMoCartFile.open(moCartFile, ios::in);

			if(readMoCartFile.is_open())
			{
				while(getline(readMoCartFile, line))
				{
					pos = line.find(itemCartId);
					if(pos != string::npos)
					{
						if(pos < 10)
						{
							savedLine = line;
						}
						else
						{
							readMoCartFile.close();

							cout << itemCartId << " does not exist. Please re-enter an valid id: ";
							getline(cin, itemCartId);
							addItem();
						}
					}
				}
			}
			else
			{
				cout << "Fail to open file...";
			}
			readMoCartFile.close();

			if(savedLine == "")
			{
				cout << "Item not found" << endl;
			}
			else
			{
				line = "";

				ifstream getFile;
				getFile.open(moCartFile, ios::in);

				ofstream temporarily;
				temporarily.open("temporarily.txt");

				while(getline(getFile, line))
				{
					if(line.compare(savedLine) != 0)
					{
						temporarily << line << endl;
					}
				}
				getFile.close();
				temporarily.close();
			}

			if(remove(cnvrFileName)==0)
			{
				cout << "Removed selected item from shopping cart. " << endl;

				if(rename("temporarily.txt", cnvrFileName)==0)
				{
					cout << "Renamed temporarily file to original file" << endl;
				}
				else
				{
                    cout << "Renamed Failed";
                }
            }
			else
			{
                cout << "Removed Failed";
			}
		}
        void modifyItem()
        {
        	cout << "1417" << endl;
		}

};

int main()
{
	itemChoice(); 
	
	return 0;
}

void itemChoice()
{
	magazine ma;
	book bo;
	movie mo;
	
	item *item1 = &ma;
	item *item2 = &bo;
	item *item3 = &mo;
	
	int cartOption;
	int categoryOption;
	
	cout << "\n=========================================" << endl;
    cout << "         Action for Shopping Cart        " << endl;
    cout << "=========================================" << endl;
    cout << "             1. View item                " << endl;
    cout << "             2. Add item                 " << endl;
    cout << "             3. Delete item              " << endl;
    cout << "             4. Modify item              " << endl;
	cout << "=========================================" << endl;
	cout << "Choose an option [Enter 1, 2, 3 or 4]: ";
	cin >> cartOption;
	
	while(cartOption!=1 && cartOption!=2 && cartOption!=3 && cartOption!=4)
	{
		cout << "\nInvalid option for shopping cart!" << endl;
		cout << "Please enter an valid option: ";
		cin >> cartOption;
	}
	
	cout << "\n*****************************************" << endl;
	cout << "       Item Type for Shopping Cart       " << endl;
	cout << "*****************************************" << endl;
	cout << "           Category 1: Magazine          " << endl;
	cout << "           Category 2: Book              " << endl;
	cout << "           Category 3: Movie             " << endl;
	cout << "*****************************************" << endl;
	cout << "Choose the category you want [Enter 1, 2 or 3]: ";
	cin >> categoryOption;
	
	while(categoryOption!=1 && categoryOption!=2 && categoryOption!=3)
	{
		cout << "\nInvalid option for item type!" << endl;
		cout << "Please enter an valid option: ";
		cin >> categoryOption;
	}
	
	switch(categoryOption)
	{
		case 1: item1->setCartOption(cartOption); 
				if(cartOption==1)
				{ ma.viewItem(); }
				else if(cartOption==2)
				{ ma.addItem(); }
				else if(cartOption==3)
				{ ma.deleteItem(); }
				else if(cartOption==4)
				{ ma.modifyItem(); }
				break;
		case 2: item2->setCartOption(cartOption); 
				if(cartOption==1)
				{ bo.viewItem(); }
				else if(cartOption==2)
				{ bo.addItem(); }
				else if(cartOption==3)
				{ bo.deleteItem(); }
				else if(cartOption==4)
				{ bo.modifyItem(); }
				break;
		case 3: item3->setCartOption(cartOption); 
				if(cartOption==1)
				{ mo.viewItem(); }
				else if(cartOption==2)
				{ mo.addItem(); }
				else if(cartOption==3)
				{ mo.deleteItem(); }
				else if(cartOption==4)
				{ mo.modifyItem(); }
				break;
		default: cout << "Invalid option!"; 
	}
}

int idGenerator(string txtfile)
{
	int id;
	
	ifstream checkId;
	checkId.open(txtfile, ios::in);
	
	if(checkId.is_open())
	{
		checkId >> id;
		checkId.close();
	}
	else
	{
		cout << "Id Auto Generator Failed..." << endl;
	}
	id++;
	
	ofstream addId;
	addId.open(txtfile);
	
	if(addId.is_open())
	{
		addId << id;
	}
	else
	{
		cout << "Id Auto Generator Failed..." << endl;
	}
	return id;
}
